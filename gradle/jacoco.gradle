apply plugin: 'jacoco'

jacoco {
    toolVersion = "$jacoco_version"
}

final def srcDirs = ["src/main/java"]

final def excludes = [
    '**/R.class',
    '**/R$*.class',
    '**/*$ViewBinder*.*',
    '**/*MembersInjector*.*',
    '**/BuildConfig.*',
    '**/Manifest*.*',
    '**/*$Lambda$*.class',
    '**/*Factory*.class',
    '**/*$Builder*',
    '**/di/*.class'
]

project.afterEvaluate {
    final def variants = getVariants()
    if (variants != null) {
        variants.all { final variant ->
            if (variant.name.toLowerCase().contains("release")) {
                return
            }

            task("jacoco${variant.name.capitalize()}UnitTest", type: JacocoReport, dependsOn: "test${variant.name.capitalize()}UnitTest") {
                group = "verification"

                outputs.upToDateWhen { false }

                classDirectories.setFrom(getClassDirs('debug', 'debug', excludes))
                additionalSourceDirs.setFrom(files(srcDirs))
                sourceDirectories.setFrom(files(srcDirs))
                executionData.setFrom(fileTree(dir: "$project.buildDir/jacoco", includes: [
                    "**/*.exec"
                ]))

                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

            task("jacoco${variant.name.capitalize()}UnitTestReport", type: JacocoReport) {
                group = "verification"

                outputs.upToDateWhen { false }

                classDirectories.setFrom(getClassDirs('debug', 'debug', excludes))
                additionalSourceDirs.setFrom(files(srcDirs))
                sourceDirectories.setFrom(files(srcDirs))
                executionData.setFrom(fileTree(dir: "$project.buildDir/jacoco", includes: [
                    "**/*.exec"
                ]))

                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

            task("jacoco${variant.name.capitalize()}AndroidTest", type: JacocoReport, dependsOn: "connected${variant.name.capitalize()}AndroidTest") {
                group = "verification"

                outputs.upToDateWhen { false }

                classDirectories.setFrom(getClassDirs('debug', 'debug', excludes))
                additionalSourceDirs.setFrom(files(srcDirs))
                sourceDirectories.setFrom(files(srcDirs))
                executionData.setFrom(fileTree(dir: "$project.buildDir/outputs", includes: [
                    '**/*.ec'
                ]))

                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

            task("jacoco${variant.name.capitalize()}AndroidTestReport", type: JacocoReport) {
                group = "verification"

                outputs.upToDateWhen { false }

                classDirectories.setFrom(getClassDirs('debug', 'debug', excludes))
                additionalSourceDirs.setFrom(files(srcDirs))
                sourceDirectories.setFrom(files(srcDirs))
                executionData.setFrom(fileTree(dir: "$project.buildDir/outputs", includes: [
                    '**/*.ec'
                ]))

                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

            task("jacoco${variant.name.capitalize()}CombinedTest", type: JacocoReport, dependsOn: ["test${variant.name.capitalize()}UnitTest", "connected${variant.name.capitalize()}AndroidTest"]) {
                group = "verification"

                outputs.upToDateWhen { false }

                classDirectories.setFrom(getClassDirs('debug', 'debug', excludes))
                additionalSourceDirs.setFrom(files(srcDirs))
                sourceDirectories.setFrom(files(srcDirs))
                executionData.setFrom(files([
                    fileTree(dir: "$project.buildDir/outputs", include: '**/*.ec'),
                    fileTree(dir: "$project.buildDir/jacoco", include: '**/*.exec')
                ]))

                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

            task("jacoco${variant.name.capitalize()}CombinedTestReport", type: JacocoReport) {
                group = "verification"

                outputs.upToDateWhen { false }

                classDirectories.setFrom(getClassDirs('debug', 'debug', excludes))
                additionalSourceDirs.setFrom(files(srcDirs))
                sourceDirectories.setFrom(files(srcDirs))
                executionData.setFrom(files([
                    fileTree(dir: "$project.buildDir/outputs", include: '**/*.ec'),
                    fileTree(dir: "$project.buildDir/jacoco", include: '**/*.exec')
                ]))

                reports {
                    xml.enabled = true // Enabled for CodeCov
                    html.enabled = true
                }
            }
        }
    }
}

private def getClassDirs(final String javaDirSuffix, final String kotlinDirSuffix, final excludes) {
    final def java = fileTree(
        dir: "${buildDir}/intermediates/classes/${javaDirSuffix}",
        excludes: excludes
    )
    final def kotlin = fileTree(
        dir: "${buildDir}/tmp/kotlin-classes/${kotlinDirSuffix}",
        excludes: excludes
    )
    files([java], [kotlin])
}

private def getVariants() {
    if (project.hasProperty("android")) {
        if (project.android.hasProperty('libraryVariants')) {
            return project.android.libraryVariants
        } else {
            return project.android.applicationVariants
        }
    }
}
