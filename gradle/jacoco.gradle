apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.1"
}

def srcDirs = ["src/main/java"]

def excludes = ['**/R.class',
                '**/R$*.class',
                '**/*$ViewBinder*.*',
                '**/*MembersInjector*.*',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*$Lambda$*.class',
                '**/*Factory*.class',
                '**/*$Builder*']

project.afterEvaluate {
    def variants = getVariants()
    if (variants != null) {
        variants.all { variant ->
            task("jacoco${variant.name.capitalize()}UnitTest", type: JacocoReport, dependsOn: "test${variant.name.capitalize()}UnitTest") {
                group = "verification"

                classDirectories = getClassDirs('debug', 'debug', excludes)
                additionalSourceDirs = files(srcDirs)
                sourceDirectories = files(srcDirs)
                executionData = fileTree(dir: "$project.buildDir/jacoco", includes: [
                    "**/*.exec"
                ])

                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

            task("jacoco${variant.name.capitalize()}UnitTestReport", type: JacocoReport) {
                group = "verification"

                classDirectories = getClassDirs('debug', 'debug', excludes)
                additionalSourceDirs = files(srcDirs)
                sourceDirectories = files(srcDirs)
                executionData = fileTree(dir: "$project.buildDir/jacoco", includes: [
                    "**/*.exec"
                ])

                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

            task("jacoco${variant.name.capitalize()}AndroidTest", type: JacocoReport, dependsOn: "connected${variant.name.capitalize()}AndroidTest") {
                group = "verification"

                classDirectories = getClassDirs('debug', 'debug', excludes)
                additionalSourceDirs = files(srcDirs)
                sourceDirectories = files(srcDirs)
                executionData = fileTree(dir: "$project.buildDir/outputs/code-coverage/connected", includes: [
                    '**/*.ec'
                ])

                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

            task("jacoco${variant.name.capitalize()}AndroidTestReport", type: JacocoReport) {
                group = "verification"

                classDirectories = getClassDirs('debug', 'debug', excludes)
                additionalSourceDirs = files(srcDirs)
                sourceDirectories = files(srcDirs)
                executionData = fileTree(dir: "$project.buildDir/outputs/code-coverage/connected", includes: [
                    '**/*.ec'
                ])

                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

            task("jacoco${variant.name.capitalize()}CombinedTest", type: JacocoReport, dependsOn: ["test${variant.name.capitalize()}UnitTest", "connected${variant.name.capitalize()}AndroidTest"]) {
                group = "verification"

                classDirectories = getClassDirs('debug', 'debug', excludes)
                additionalSourceDirs = files(srcDirs)
                sourceDirectories = files(srcDirs)
                executionData = files([
                    fileTree(dir: "$project.buildDir/outputs/code-coverage/connected", include: '**/*.ec'),
                    fileTree(dir: "$project.buildDir/jacoco", include: '**/*.exec')
                ])

                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

            task("jacoco${variant.name.capitalize()}CombinedTestReport", type: JacocoReport) {
                group = "verification"

                classDirectories = getClassDirs('debug', 'debug', excludes)
                additionalSourceDirs = files(srcDirs)
                sourceDirectories = files(srcDirs)
                executionData = files([
                    fileTree(dir: "$project.buildDir/outputs/code-coverage/connected", include: '**/*.ec'),
                    fileTree(dir: "$project.buildDir/jacoco", include: '**/*.exec')
                ])

                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }
        }
    }
}

private def getClassDirs(String javaDirSuffix, String kotlinDirSuffix, excludes) {
    def java = fileTree(
        dir: "${buildDir}/intermediates/classes/${javaDirSuffix}",
        excludes: excludes
    )
    def kotlin = fileTree(
        dir: "${buildDir}/tmp/kotlin-classes/${kotlinDirSuffix}",
        excludes: excludes
    )
    files([java], [kotlin])
}

private def getVariants() {
    if (project.hasProperty("android")) {
        if (project.android.hasProperty('libraryVariants')) {
            return project.android.libraryVariants
        } else {
            return project.android.applicationVariants
        }
    }
}
