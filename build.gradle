buildscript {
    project.ext {
        agp_version = '3.1.0'
        bintray_version = '1.8.4'
        cpd_version = '1.1'
        dokka_version = '0.9.17'
        dexcount_version = '0.8.3'
        jacoco_version = '0.8.1'
        kotlin_version = "1.2.60"
        maven_version = '2.0'
    }

    repositories {
        jcenter()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$agp_version"
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:$dokka_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.getkeepsafe.dexcount:dexcount-gradle-plugin:$dexcount_version"
        classpath "com.github.dcendents:android-maven-gradle-plugin:$maven_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_version"
        classpath "de.aaschmid:gradle-cpd-plugin:$cpd_version"
        classpath "org.jacoco:org.jacoco.core:$jacoco_version"
        classpath "org.jacoco:org.jacoco.agent:$jacoco_version"
        classpath "org.jacoco:org.jacoco.report:$jacoco_version"
    }
}

plugins {
    id "io.gitlab.arturbosch.detekt" version "1.0.0.RC8"
    id "org.jlleitschuh.gradle.ktlint" version "5.0.0"
}

apply from: rootProject.file("$rootProject.projectDir/gradle/detekt.gradle")
apply from: rootProject.file("$rootProject.projectDir/gradle/ktlint.gradle")
apply from: rootProject.file("$rootProject.projectDir/gradle/static-analysis.gradle")

apply from: rootProject.file("$rootProject.projectDir/gradle/code-coverage.gradle")

subprojects {
    apply plugin: 'org.jetbrains.dokka-android'
    apply plugin: "org.jlleitschuh.gradle.ktlint"

    apply from: rootProject.file("$rootProject.projectDir/gradle/dokka.gradle")

    apply from: rootProject.file("$rootProject.projectDir/gradle/cpd.gradle")
    apply from: rootProject.file("$rootProject.projectDir/gradle/pmd.gradle")

    apply from: rootProject.file("$rootProject.projectDir/gradle/jacoco.gradle")
}

allprojects {
    repositories {
        jcenter()
        google()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * Improve build server performance by allowing disabling of pre-dexing
 * (see http://tools.android.com/tech-docs/new-build-system/tips#TOC-Improving-Build-Server-performance.)
 */
project.ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if (rootProject.ext.has('preDexLibs')) {
            if ("com.android.build.gradle.AppPlugin" == plugin.class.name) {
                project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
            } else if ("com.android.build.gradle.LibraryPlugin" == plugin.class.name) {
                project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
            }
        }
    }
}

ext {
    travisBuild = System.getenv("TRAVIS") == "true"
    // allows for -Dpre-dex=false to be set
    preDexEnabled = "true" == System.getProperty("pre-dex", "true")

    // Bintray and POM Details
    GROUP = "com.isupatches"

    BINTRAY_REPO = "Maven"
    BINTRAY_NAME = "wisefy"

    LIBRARY_DESCRIPTION = "Wrapper around WifiManager and ConfigurationManager for Android"

    POM_PACKAGING = "aar"
    POM_DESCRIPTION = "wisefy"
    POM_URL = "https://github.com/isuPatches/WiseFy"

    POM_SCM_URL = "https://github.com/isuPatches/WiseFy"
    POM_SCM_ISSUE_URL = 'https://github.com/isuPatches/WiseFy/issues'
    POM_SCM_CONNECTION = "scm:git:https://github.com/isuPatches/WiseFy.git"
    POM_SCM_DEV_CONNECTION = "scm:git:git@github.com:isuPatches/WiseFy.git"

    POM_LICENSE_NAME = "The Apache Software License, Version 2.0"
    POM_LICENSE_URL = "http://www.apache.org/licenses/LICENSE-2.0.txt"
    POM_LICENSE_DIST = "repo"
    ALL_LICENSES = ["Apache-2.0"]

    POM_DEVELOPER_ID = "isuPatches"
    POM_DEVELOPER_NAME = "Patches Klinefelter"
    POM_DEVELOPER_EMAIL = "isuPatches@yahoo.com"

    // Common build version details
    BUILD_TOOLS_VERSION = '27.0.3'
    MAX_SDK_VERSION = 27
    MIN_SDK_VERSION = 16
    VERSION_CODE = 13
    VERSION_NAME = "3.0.0"
}

task makeGoodChoices {
    group = "verification"

    dependsOn 'staticAnalysisSanityCheck', 'jacocoAllCombinedTests'
    doLast {
        println "\n#############################################" +
                "\n# All checks passed! You are doing so good! #" +
                "\n# You may now push the awesome to origin :) #" +
                "\n#############################################"
    }
}