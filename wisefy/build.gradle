apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

group = rootProject.ext.GROUP
version = rootProject.ext.VERSION_NAME

android {

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !travisBuild
        javaMaxHeapSize "2g"
    }

    adbOptions {
        timeOutInMs 15 * 60 * 1000  // 15 minutes
        installOptions "-d", "-t"
    }

    compileSdkVersion rootProject.ext.MAX_SDK_VERSION
    buildToolsVersion rootProject.ext.BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion rootProject.ext.MIN_SDK_VERSION
        targetSdkVersion rootProject.ext.MAX_SDK_VERSION
        versionCode rootProject.ext.VERSION_CODE
        versionName rootProject.ext.VERSION_NAME
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'consumer-proguard-rules.pro'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFile file("proguard-test-rules.pro")
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkAllWarnings true
        warningsAsErrors true
        showAll true
        explainIssues true
        abortOnError true
        // UnusedIds is disabled for Kotlin synthetics and MissingRegistered is disabled for androidx.
        disable 'UnusedIds', 'MissingRegistered'
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            /*
             * includeAndroidResources and all block were added for RoboElectric
             */
            includeAndroidResources = true
            all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }

    sourceSets {
        def commonTestDir = 'src/commonTest/java'

        test { java.srcDir commonTestDir }

        androidTest { java.srcDir commonTestDir }

        main { jni.srcDirs = [] }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.annotation:annotation:$androidx_support_annotations_version"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // Unit Tests
    testImplementation "androidx.test:core:$androidx_core_test_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "junit:junit:$junit_version"

    // Instrumentation Tests
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidx_espresso_core_version"
    androidTestImplementation "androidx.test:runner:$androidx_test_runner_version"
    androidTestImplementation "androidx.test:rules:$androidx_test_runner_version"
    androidTestImplementation "org.mockito:mockito-core:$mockito_version"
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockito_kotlin_version"
}

apply from: rootProject.file("$rootProject.projectDir/gradle/gradle-bintray-install.gradle")
apply from: rootProject.file("$rootProject.projectDir/gradle/gradle-bintray-upload.gradle")
